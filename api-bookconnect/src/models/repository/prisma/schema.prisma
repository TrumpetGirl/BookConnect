generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Author {
  id                       Int      @id @default(autoincrement())
  name                     String   @db.VarChar(100)
  birth_date               DateTime @db.Date
  nationality              String   @db.VarChar(50)
  image_path               String?  @db.VarChar(255)
  books                    Book[]
}

model Book {
  id                             Int         @id @default(autoincrement())
  isbn                           String      @db.VarChar(50)
  title                          String      @db.VarChar(100)
  publication_year               Int
  authorId                       Int         @default(1)
  genreId                        Int         @default(1)
  synopsis                       String?     @db.Text
  image_path                     String      @db.VarChar(255)
  author                         Author      @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_book_author")
  genre                          Genre       @relation(fields: [genreId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_book_genre")
  collections                    Collection[]

  @@index([authorId], map: "fk_book_author")
  @@index([genreId], map: "fk_book_genre")
}

model Collection {
  id                           Int    @id @default(autoincrement())
  userId                       Int
  bookId                       Int
  stateId                      Int
  rating                       Int
  review                       String @db.Text
  collection_list              Collection_list[]
  user                         User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_collection_user")
  book                         Book   @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_collection_book")
  state                        State  @relation(fields: [stateId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_collection_state")
  

  @@unique([userId, bookId], map: "book_collection")
  @@index([userId], map: "fk_collection_user")
  @@index([bookId], map: "fk_collection_book")
  @@index([stateId], map: "fk_collection_state")
}

model Collection_list {
  id                             Int  @id @default(autoincrement())
  collectionId                   Int
  listId                         Int
  list                           List @relation(fields: [listId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_collection_list_list")
  collection                     Collection @relation(fields: [collectionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_collection_list_collection")
  @@index([listId], map: "fk_collection_list_list")
  @@index([collectionId], map: "fk_collection_list_collection")
}

model Genre {
  id                     Int    @id @default(autoincrement())
  name                   String @db.VarChar(50)
  books                  Book[]
}

model List {
  id                                       Int              @id @default(autoincrement())
  name                                     String           @db.VarChar(100)
  description                              String           @db.Text
  userId                                   Int
  user                                     User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_list_user")
  collection_list                          Collection_list[]

  @@index([userId], map: "fk_list_user")
}

model Role {
  id                   Int    @id @default(autoincrement())
  type                 String @db.VarChar(50)
  users                User[]
}

model State {
  id                               Int          @id @default(autoincrement())
  type                             String       @db.VarChar(50)
  collection                       Collection[]
}

model User {
  id                                         Int              @id @default(autoincrement())
  username                                   String           @unique(map: "username") @db.VarChar(100)
  email                                      String           @db.VarChar(100)
  password                                   String           @db.VarChar(80)
  birth_date                                 DateTime         @db.Date
  roleId                                     Int              @default(2)
  image_path                                 String           @db.VarChar(255)
  lists                                      List[]           
  role                                       Role             @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_user")
  collections                                Collection[]     
  followers                                  User_follower[]  @relation("follower")
  followings                                 User_follower[]  @relation("following")

  @@index([roleId], map: "fk_user_role")
}

model User_follower {
  id                                Int      @id @default(autoincrement())
  followerId                        Int
  followingId                       Int
  start_following                   DateTime @db.Date
  unfollow                          Boolean
  follower                          User     @relation("follower", fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_follower_follower")
  following                         User     @relation("following", fields: [followingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_follower_following")
  
  @@unique([followerId, followingId], map: "follower_following")
  @@index([followerId], map: "fk_user_follower_follower")
  @@index([followingId], map: "fk_user_follower_following")
}